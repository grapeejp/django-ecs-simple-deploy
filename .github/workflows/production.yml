name: Deploy to Production

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Set up variables
      id: vars
      run: |
        echo "ECR_REPOSITORY=django-ecs-app" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
        echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
        
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f docker/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
        
    - name: Deploy ECS Cluster
      run: |
        aws cloudformation deploy \
          --stack-name django-ecs-cluster-prod \
          --template-file cloudformation/ecs-cluster.yml \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides Environment=production \
          --no-fail-on-empty-changeset
          
    - name: Deploy ECS Service
      run: |
        aws cloudformation deploy \
          --stack-name django-ecs-service-prod \
          --template-file cloudformation/ecs-service.yml \
          --parameter-overrides \
            ImageUrl=$IMAGE_URI \
            Environment=production \
          --no-fail-on-empty-changeset
          
    - name: Get Application URL
      run: |
        ALB_DNS=$(aws cloudformation describe-stacks --stack-name django-ecs-cluster-prod --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerDNSName'].OutputValue" --output text)
        echo "::notice ::本番環境URL: http://$ALB_DNS"
        
    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        mention: 'here'
        if_mention: failure
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true 