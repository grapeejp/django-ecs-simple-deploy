name: Deploy to Production

on:
  release:
    types: [created]
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'ap-northeast-1'
    
    - name: Setup Debug Logging
      run: |
        echo "AWS_STS_REGIONAL_ENDPOINTS=regional" >> $GITHUB_ENV
        echo "AWS_SDK_LOAD_CONFIG=1" >> $GITHUB_ENV
        echo "AWS_PAGER=" >> $GITHUB_ENV  # AWSのページャーを無効化して全出力を表示
        mkdir -p logs
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Set up variables
      id: vars
      run: |
        echo "ECR_REPOSITORY=django-ecs-app" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
        if [ ! -z "${{ github.event.release.tag_name }}" ]; then
          echo "IMAGE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
        fi
        echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
        echo "AWS_REGION=ap-northeast-1" >> $GITHUB_ENV
        echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
        echo "SERVICE_NAME=django-ecs-service-prod" >> $GITHUB_ENV
        
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f docker/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
    
    - name: Deploy ECS Cluster
      run: |
        set -x  # デバッグ出力を有効化
        aws cloudformation deploy \
          --stack-name django-ecs-cluster-prod \
          --template-file cloudformation/ecs-cluster.yml \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides Environment=production \
          --no-fail-on-empty-changeset \
          --debug 2>&1 | tee logs/cluster-deploy.log
        set +x
    
    - name: Check and Clean Existing ECS Services
      run: |
        echo "既存のECSサービスを確認しています..."
        EXISTING_SERVICES=$(aws ecs list-services --cluster django-ecs-cluster-prod --output json | jq -r '.serviceArns[]' | grep django-ecs-service-prod || echo "")
        
        if [ ! -z "$EXISTING_SERVICES" ]; then
          echo "以下の既存サービスを削除します:"
          echo "$EXISTING_SERVICES"
          
          for SERVICE_ARN in $EXISTING_SERVICES; do
            SERVICE_NAME=$(echo $SERVICE_ARN | awk -F'/' '{print $NF}')
            echo "サービス削除中: $SERVICE_NAME"
            
            # サービスをドレインして削除
            aws ecs update-service --cluster django-ecs-cluster-prod --service $SERVICE_NAME --desired-count 0
            aws ecs wait services-stable --cluster django-ecs-cluster-prod --services $SERVICE_NAME
            aws ecs delete-service --cluster django-ecs-cluster-prod --service $SERVICE_NAME --force
            
            echo "サービス削除完了: $SERVICE_NAME"
          done
        else
          echo "既存のサービスが見つかりませんでした"
        fi
    
    - name: Validate CloudFormation Template
      run: |
        echo "サービステンプレートの検証を実行します..."
        aws cloudformation validate-template \
          --template-body file://cloudformation/ecs-service.yml \
          2>&1 | tee logs/template-validation.log
          
    - name: Deploy ECS Service
      id: deploy-service
      run: |
        set -x  # デバッグ出力を有効化
        aws cloudformation deploy \
          --stack-name django-ecs-service-prod-${{ env.TIMESTAMP }} \
          --template-file cloudformation/ecs-service.yml \
          --parameter-overrides \
            ImageUrl=$IMAGE_URI \
            Environment=production \
            TimestampSuffix= \
          --no-fail-on-empty-changeset \
          --debug 2>&1 | tee logs/service-deploy.log
        
        # デプロイ成功時のスタック情報を出力
        echo "スタック詳細情報を取得しています..."
        aws cloudformation describe-stacks --stack-name django-ecs-service-prod-${{ env.TIMESTAMP }} \
          --query "Stacks[0]" --output json | tee logs/stack-details.json
        set +x
    
    - name: Handle CloudFormation Failure
      if: failure()
      run: |
        echo "::error::CloudFormationデプロイが失敗しました。詳細なエラー情報を収集します。"
        
        # スタックイベント情報を取得
        echo "スタックイベント履歴を取得しています..."
        aws cloudformation describe-stack-events \
          --stack-name django-ecs-service-prod-${{ env.TIMESTAMP }} \
          --query "StackEvents[?ResourceStatus=='CREATE_FAILED'].{Resource:LogicalResourceId,Reason:ResourceStatusReason}" \
          --output json | tee logs/stack-failures.json
        
        # スタックの詳細情報を取得
        echo "CloudFormationテンプレートで使用されている値を確認しています..."
        grep -A 10 "ContainerCpu\|ContainerMemory\|ServiceName" cloudformation/ecs-service.yml
        
        # CloudWatchログの確認
        echo "CloudWatchログを確認しています..."
        aws logs describe-log-groups \
          --log-group-name-prefix "/ecs/django-app-prod" \
          --output json | tee logs/log-groups.json
          
    - name: Get Application URL
      if: success()
      run: |
        ALB_DNS=$(aws cloudformation describe-stacks --stack-name django-ecs-cluster-prod --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerDNSName'].OutputValue" --output text)
        echo "::notice ::本番環境URL: http://$ALB_DNS"
    
    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: deployment-logs-${{ env.TIMESTAMP }}
        path: logs/
        retention-days: 7
        
    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        mention: 'here'
        if_mention: failure
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true 