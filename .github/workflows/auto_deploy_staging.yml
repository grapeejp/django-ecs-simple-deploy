name: Deploy to Staging (Option B)

on:
  workflow_run:
    workflows:
      - "Run Tests"
    types:
      - completed

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: django-ecs-app
  ECS_CLUSTER: django-ecs-cluster-staging
  ECS_SERVICE: django-ecs-service-staging
  TASK_DEFINITION_FAMILY: django-app-staging

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'develop' }}
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
      run: |
        # Build docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
        
        # Push image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Output image URI
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_FAMILY }} \
          --query taskDefinition > task-definition.json
    
    - name: Fill in the new image ID in the task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: django-app
        image: ${{ steps.build-image.outputs.image }}
        environment-variables: |
          ALLOWED_HOSTS=*.elb.amazonaws.com,staging.grape-app.jp
          DEBUG=0
    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
    
    - name: Get service info
      if: success()
      run: |
        # Get ALB DNS
        ALB_DNS=$(aws cloudformation describe-stacks \
          --stack-name django-ecs-cluster-staging \
          --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerDNSName'].OutputValue" \
          --output text)
        
        echo "::notice ::ステージング環境にデプロイ完了"
        echo "::notice ::URL: http://$ALB_DNS"
        echo "::notice ::カスタムドメイン: https://staging.grape-app.jp"
    
    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          ステージング環境へのデプロイが${{ job.status == 'success' && '成功しました ✅' || '失敗しました ❌' }}
          コミット: ${{ github.event.workflow_run.head_sha }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true 