AWSTemplateFormatVersion: '2010-09-09'
Description: 'Django ECS Service with HTTPS Support for Staging'

Parameters:
  ImageUrl:
    Type: String
    Description: The URL of the Docker image to run
    Default: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/django-ecs-app:latest
  
  CertificateArn:
    Type: String
    Description: The ARN of the ACM certificate for staging.grape-app.jp
    Default: arn:aws:acm:ap-northeast-1:026090540679:certificate/9de6a33c-f3a7-4803-a699-5c6fde6e0f6a

Resources:
  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: django-app-staging-https
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Sub 'django-ecs-cluster-staging-v2-ECSTaskExecutionRole'
      TaskRoleArn:
        Fn::ImportValue:
          !Sub 'django-ecs-cluster-staging-v2-ECSTaskExecutionRole'
      ContainerDefinitions:
        - Name: django-app
          Image: !Ref ImageUrl
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "/ecs/django-app-staging-https"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: ALLOWED_HOSTS
              Value: 'staging.grape-app.jp,localhost,127.0.0.1'
            - Name: DJANGO_SETTINGS_MODULE
              Value: 'config.settings'
            - Name: SECRET_KEY
              Value: 'django-insecure-temporary-key-for-staging'
            - Name: DEBUG
              Value: "False"
            - Name: SECURE_SSL_REDIRECT
              Value: "True"
            - Name: SECURE_PROXY_SSL_HEADER
              Value: "HTTP_X_FORWARDED_PROTO,https"

  # Target Group for ALB
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: django-staging-https-tg
      Port: 8000
      Protocol: HTTP
      VpcId:
        Fn::ImportValue:
          !Sub 'django-ecs-cluster-staging-v2-VPC'
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health/
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # HTTPS Listener (Port 443)
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn:
        Fn::ImportValue:
          !Sub 'django-ecs-cluster-staging-v2-ApplicationLoadBalancer'
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn

  # HTTP to HTTPS Redirect Listener (Port 80)
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301
      LoadBalancerArn:
        Fn::ImportValue:
          !Sub 'django-ecs-cluster-staging-v2-ApplicationLoadBalancer'
      Port: 80
      Protocol: HTTP

  # HTTPS Listener Rule for staging.grape-app.jp
  HTTPSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: host-header
          Values:
            - staging.grape-app.jp
      ListenerArn: !Ref HTTPSListener
      Priority: 100

  # ECS Service with ALB Integration
  Service:
    Type: AWS::ECS::Service
    DependsOn: HTTPSListenerRule
    Properties:
      ServiceName: django-ecs-service-staging-https
      Cluster:
        Fn::ImportValue:
          !Sub 'django-ecs-cluster-staging-v2-ECSCluster'
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Sub 'django-ecs-cluster-staging-v2-ECSSecurityGroup'
          Subnets:
            - Fn::ImportValue:
                !Sub 'django-ecs-cluster-staging-v2-PrivateSubnet1'
            - Fn::ImportValue:
                !Sub 'django-ecs-cluster-staging-v2-PrivateSubnet2'
      LoadBalancers:
        - ContainerName: django-app
          ContainerPort: 8000
          TargetGroupArn: !Ref TargetGroup

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/ecs/django-app-staging-https"
      RetentionInDays: 14

Outputs:
  Service:
    Description: The ECS Service with HTTPS
    Value: !Ref Service
    Export:
      Name: !Sub "${AWS::StackName}-Service"
      
  TargetGroup:
    Description: The Target Group for ALB
    Value: !Ref TargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-TargetGroup"
      
  HTTPSListener:
    Description: The HTTPS Listener
    Value: !Ref HTTPSListener
    Export:
      Name: !Sub "${AWS::StackName}-HTTPSListener" 