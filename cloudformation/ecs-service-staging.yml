AWSTemplateFormatVersion: '2010-09-09'
Description: 'Django ECS Service for Staging Environment (Lower Resource Configuration)'

Parameters:
  ImageUrl:
    Type: String
    Description: The URL of the Docker image to run
    Default: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/django-ecs-app:latest

  ContainerCpu:
    Type: Number
    Description: CPU units for the container (256 = 0.25 vCPU)
    Default: 256

  ContainerMemory:
    Type: Number
    Description: Memory for the container in MiB
    Default: 512

  DesiredCount:
    Type: Number
    Description: How many instances of the task to run
    Default: 1

  DeploymentId:
    Type: String
    Description: Unique identifier for this deployment
    Default: !Select [2, !Split ["/", !Ref "AWS::StackId"]]

Conditions:
  IsUpdate: !Not [!Equals [!Ref "AWS::StackId", ""]]

Resources:
  # Custom Resource to cleanup old rules
  RuleCleanup:
    Type: Custom::RuleCleanup
    Properties:
      ServiceToken: !GetAtt RuleCleanupFunction.Arn
      ListenerArn:
        Fn::ImportValue:
          !Sub 'django-ecs-cluster-staging-ALBListener'
      StackName: !Ref "AWS::StackName"

  RuleCleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt RuleCleanupRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      elbv2 = boto3.client('elbv2')
                      stack_name = event['ResourceProperties']['StackName']
                      listener_arn = event['ResourceProperties']['ListenerArn']
                      
                      # Get all rules for the listener
                      rules = elbv2.describe_rules(ListenerArn=listener_arn)['Rules']
                      
                      # Delete rules that belong to old versions of this stack
                      for rule in rules:
                          if rule.get('Priority') != 'default':
                              tags = elbv2.describe_rules(RuleArns=[rule['RuleArn']])['Rules'][0].get('Tags', [])
                              for tag in tags:
                                  if tag['Key'] == 'StackName' and tag['Value'].startswith(stack_name):
                                      logger.info(f"Deleting old rule: {rule['RuleArn']}")
                                      elbv2.delete_rule(RuleArn=rule['RuleArn'])
                      
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

      Runtime: python3.9
      Timeout: 300
      MemorySize: 128

  RuleCleanupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ELBRuleManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:DescribeRules
                  - elasticloadbalancing:DeleteRule
                  - elasticloadbalancing:DescribeTags
                Resource: '*'

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-${DeploymentId}
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Sub 'django-ecs-cluster-staging-ECSTaskExecutionRole'
      TaskRoleArn:
        Fn::ImportValue:
          !Sub 'django-ecs-cluster-staging-ECSTaskExecutionRole'
      ContainerDefinitions:
        - Name: django-app
          Image: !Ref ImageUrl
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /ecs/${AWS::StackName}
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref DeploymentId
          Environment:
            - Name: DEBUG
              Value: '1'
            - Name: ALLOWED_HOSTS
              Value: '*.elb.amazonaws.com'
            - Name: DJANGO_SETTINGS_MODULE
              Value: 'config.settings'
            - Name: DEPLOYMENT_ID
              Value: !Ref DeploymentId
            - Name: SECRET_KEY
              Value: '{{resolve:secretsmanager:django-ecs-secrets:SecretString:SECRET_KEY}}'

  # ECS Service
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Sub ${AWS::StackName}-${DeploymentId}
      Cluster:
        Fn::ImportValue:
          !Sub 'django-ecs-cluster-staging-ECSCluster'
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Sub 'django-ecs-cluster-staging-ECSSecurityGroup'
          Subnets:
            - Fn::ImportValue:
                !Sub 'django-ecs-cluster-staging-PublicSubnet1'
            - Fn::ImportValue:
                !Sub 'django-ecs-cluster-staging-PublicSubnet2'
      LoadBalancers:
        - ContainerName: django-app
          ContainerPort: 8000
          TargetGroupArn: !Ref TargetGroup
      DeploymentConfiguration:
        MinimumHealthyPercent: 50
        MaximumPercent: 200
      HealthCheckGracePeriodSeconds: 60

  # Target Group for this deployment
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health/
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Port: 8000
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          !Sub 'django-ecs-cluster-staging-VPC'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-${DeploymentId}

  # ALB Rule
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue:
          !Sub 'django-ecs-cluster-staging-ALBListener'
      Priority: !Join ["", !Split ["-", !Ref DeploymentId]]
      Conditions:
        - Field: path-pattern
          Values:
            - !Sub /v/${DeploymentId}/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Tags:
        - Key: StackName
          Value: !Ref AWS::StackName

Outputs:
  ServiceUrl:
    Description: The URL of the service
    Value: !Sub http://${LoadBalancerDns}/v/${DeploymentId}/
    Export:
      Name: !Sub ${AWS::StackName}-ServiceUrl

  LoadBalancerDns:
    Description: The DNS name of the load balancer
    Value:
      Fn::ImportValue: !Sub 'django-ecs-cluster-staging-LoadBalancerDns'
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerDns

  DeploymentId:
    Description: The deployment ID
    Value: !Ref DeploymentId
    Export:
      Name: !Sub ${AWS::StackName}-DeploymentId 