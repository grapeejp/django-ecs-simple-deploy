# Django ECS Simple Deploy ルール

## プロジェクト概要
AWS ECS（Elastic Container Service）を使用してDjangoアプリケーションを簡単にデプロイするためのテンプレートプロジェクト

## 技術スタック
- Python 3.11+
- Django 4.2+
- Docker/Docker Compose
- AWS ECS (Fargate)
- AWS CloudFormation
- GitHub Actions
- PostgreSQL (RDS)

## アーキテクチャ対応ルール
- M3チップ（ARM64アーキテクチャ）からAWS ECS（x86_64アーキテクチャ）へのデプロイ時は明示的にプラットフォームを指定する
- Dockerfileでは必ず `--platform=linux/amd64` を指定
- Docker Composeでは `platform: linux/amd64` を設定
- ビルドコマンドでは `--platform=linux/amd64` オプションを使用

## コーディングルール

### 全般
- PEP 8準拠
- 関数/メソッドの長さは50行以内
- クラスの長さは150行以内
- 単一責任の原則を守る
- コメントは日本語で記述可

### Docker関連
- マルチステージビルドを活用
- 非rootユーザーでの実行
- 軽量ベースイメージの使用（slim/alpine）
- 環境変数で設定を注入

### AWS設定
- IAMロールは最小権限の原則に従う
- セキュリティグループは必要最小限のポートのみ開放
- 機密情報はSecrets ManagerまたはSSMパラメータストアで管理
- CloudWatchでログとメトリクスを収集

### ECSデプロイ
- デプロイ前にDockerfileのプラットフォーム指定を確認
- タスク定義ではヘルスチェックパスを適切に設定
- 静的ファイルはS3に配置しCloudFrontで配信
- セキュリティ設定（HTTPS、WAF）を適切に行う

## デプロイフロー

### 手動デプロイ
1. 環境変数設定 (`AWS_ACCOUNT_ID`, `AWS_REGION`)
2. ECRへのイメージプッシュ
3. CloudFormationスタックのデプロイ
4. デプロイ結果の確認

### CI/CD（GitHub Actions）
- mainブランチへのプッシュ: 自動デプロイ
- GitHub Secretsで認証情報を管理

## トラブルシューティング

### ECSデプロイ時の一般的な問題
- アーキテクチャ不一致エラー: `exec /usr/local/bin/python: exec format error`
  - 解決策: プラットフォーム指定を確認
- コンテナが起動しない場合: CloudWatch Logsを確認
- ヘルスチェック失敗: ALBのターゲットグループ状態を確認
- データベース接続エラー: セキュリティグループ設定を確認

### デプロイチェックリスト
- [ ] Dockerfileにプラットフォーム指定が含まれているか
- [ ] ビルドコマンドでプラットフォームが指定されているか
- [ ] データベース接続設定は正しいか
- [ ] 静的ファイルの設定は適切か
- [ ] 環境変数は正しく設定されているか
- [ ] IAMロールに必要な権限があるか
- [ ] セキュリティグループは適切に設定されているか
- [ ] ヘルスチェックは動作するか
- [ ] ログ設定は適切か
- [ ] スケーリング設定は必要に応じて行われているか

## ブランチ管理
- `main`: 本番環境用、直接コミット禁止（PR経由のみ）
- `develop`: 開発環境用、直接コミット禁止（PR経由のみ）
- `feature/*`: 新機能開発用
- `bugfix/*`: バグ修正用
- `hotfix/*`: 緊急のバグ修正用

## 重要なワークフローのルール
- **必ず作業前に `docs/ブランチ戦略.md` と `docs/GitHub設定手順.md` を読むこと**
- developブランチからfeatureブランチを作成して作業する
- 変更はすべてPull Request経由でマージする
- PRテンプレートの「重要度チェック」を必ず確認する
- 「重要な変更」に該当する場合は、レビュー必須
- Cursorの設定で自動fetch/pull機能を有効にすること
- **保護ブランチのコミット防止フックを設定**: `bash scripts/setup-git-hooks.sh`

## GitHubでのPR作成時の注意点
- PRタイトルは変更内容が明確に分かるよう具体的に記述
- 「重要な変更」の場合はレビュアーを明示的に指定する
- 軽微な変更（typo修正など）の場合はレビューなしでもマージ可能
- PRのベースブランチ（マージ先）が正しいことを確認（feature→develop、develop→main）

初心者の方へ：分からないことがあれば、遠慮なくチームメンバーに質問してください。このプロジェクトでは「聞くことで全員が成長する」文化を大切にしています。

## コミットメッセージ規約
- `feat`: 新機能
- `fix`: バグ修正
- `docs`: ドキュメントのみの変更
- `style`: コードの意味に影響しない変更（空白、フォーマット、セミコロンの欠落など）
- `refactor`: リファクタリング（バグ修正や機能追加を含まない）
- `perf`: パフォーマンス改善
- `test`: テストの追加・修正
- `chore`: ビルドプロセスやツールの変更
- `ci`: CI関連の変更

例: `feat: ECSタスク定義にヘルスチェックを追加`

## ヘルプリクエスト形式
AWS ECSデプロイ関連の支援をリクエストする際は以下の形式を使用:
```
[デプロイ課題]: <問題の簡潔な説明>
[AWS環境]: <関連するAWSリソース情報>
[エラー内容]: <発生しているエラーメッセージ>
[試した解決策]: <これまでに試した対応策>
``` 