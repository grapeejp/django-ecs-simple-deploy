# [fix] タグ機能のビューが正しいレスポンスを返さない問題の修正

## 目的
- タグ一覧ページ（/tags/）にアクセスした際に500エラーが発生する問題を修正する
- ビューが適切なHttpResponseオブジェクトを返すように実装を修正する

## 実装内容
1. タグ機能のビュー実装の修正
   - urls.pyのラムダ関数をビュークラスまたは関数に変更
   - 適切なテンプレートのレンダリング処理を実装
   - HttpResponseオブジェクトを返すように修正

2. テンプレートの実装確認
   - タグ一覧表示用のテンプレートの存在確認
   - 必要に応じてテンプレートの作成または修正

3. テスト項目の追加
   - タグ一覧ページへのアクセステスト
   - レスポンスの型チェックテスト
   - ステータスコードの確認テスト

## 技術的メモ
- エラー内容：ValueError: The view tags.urls.<lambda> didn't return an HttpResponse object
- 対象ファイル：app/tags/urls.py
- Django 5.2での推奨実装パターンに従う
- ビューの実装はクラスベースビューを検討

## テスト項目
- [ ] タグ一覧ページにアクセスして200レスポンスが返ることを確認
- [ ] タグ一覧が正しく表示されることを確認
- [ ] 単体テストが追加され、パスすることを確認

## 期限
2024/05/08

# [deploy] ダッシュボードUIの本番環境への反映

## 目的
- 開発環境で実装したダッシュボードUIを本番環境に反映する
- デプロイ後の動作確認と監視体制の確立

## 実装内容
1. デプロイ前の準備
   - 静的ファイルの最適化（圧縮、バンドル）
   - 環境変数の確認と設定
   - データベースマイグレーションの準備

2. デプロイ作業
   - CloudFormationテンプレートの更新確認
   - ECSタスク定義の更新
   - デプロイコマンドの実行
   ```bash
   ./deploy.sh production
   ```

3. デプロイ後の確認
   - 静的ファイルがS3に正しくアップロードされているか確認
   - CloudFrontのキャッシュ更新
   - ヘルスチェックの状態確認
   - アプリケーションログの監視

## 技術的メモ
- デプロイ対象：ダッシュボードUI関連ファイル
- 影響範囲：フロントエンド全般
- 必要なAWSリソース：
  - ECS (Fargate)
  - S3 (静的ファイル)
  - CloudFront
  - RDS (PostgreSQL)

## テスト項目
- [ ] 本番環境でダッシュボードが正しく表示されることを確認
- [ ] 静的ファイル（CSS/JS）が正しく読み込まれることを確認
- [ ] レスポンシブデザインの動作確認
- [ ] ブラウザ互換性の確認（Chrome, Safari, Firefox）
- [ ] パフォーマンスメトリクスの確認

## 期限
2024/05/10

# [feature] AWS Bedrock校正AIシステムのDjango+ECS移行

## 目的
- 現行EC2ベースの「AWS Bedrock Grape Context」校正システムをDjango + AWS ECSアーキテクチャへ移行
- 運用効率化と保守性の向上
- 小規模だが安定したサービス提供の実現

## 実装内容
1. 基本機能移行
   - Django環境構築
   - テキスト校正機能（AWS Bedrock連携）
   - HTMLタグ保持校正処理
   - 置換辞書による語句統一
   - 校正前後の差分表示
   - タグ推薦機能
   - 最小限のWordPress連携（リダイレクト）
   
2. 追加・改善機能
   - 校正履歴の基本的な保存と表示
   - 置換辞書の表示と管理者メンテナンス機能

3. インフラ整備
   - 小規模ECS環境構築（Fargate）
   - ECR設定
   - 小規模ALB構成
   - 小規模RDS(PostgreSQL)設定
   - CloudFormationテンプレート作成

## 技術的メモ
- Python 3.11+, Django 5.2
- AWS Bedrock API (Claude 3 Sonnet)
- フロントエンド: Django Templates + Bootstrap 5
- AWS ECS (Fargate) - 小規模
- 同時5ユーザー程度の処理を想定
- クロスプラットフォーム対応（M3 Mac → AWS x86_64）

## データベース設計
- ProofreadingRequest: 校正リクエスト
- ProofreadingResult: 校正結果
- Category: カテゴリ情報
- Tag: タグ情報
- ReplacementDictionary: 置換辞書

## テスト項目
- [ ] テキスト校正機能が正常に動作すること
- [ ] HTMLタグが保持されること
- [ ] 置換辞書による置換が適切に行われること
- [ ] WordPressからのリダイレクトが機能すること
- [ ] 校正履歴が保存・表示されること
- [ ] 同時5ユーザーの処理が可能なこと
- [ ] ECS環境でのデプロイが正常に完了すること

## 期限
2024/06/30

# [機能追加] 校正AI v2 - 4色カテゴリー分類システム

## 目的
Claude 3.5 Sonnet v2を活用した次世代校正AI機能の実装。4つのカテゴリーに分けた色分けハイライトで、より詳細で実用的な修正提案を提供する。

## 実装内容

### Phase 1: 基盤構築
1. **Claude 3.5 Sonnet v2対応**
   - BedrockClientの新モデル対応
   - プロンプト設計の最適化
   - レスポンス解析の改良

2. **カテゴリー分類システム**
   - CorrectionV2モデルの作成
   - 4つのカテゴリー定義（tone/typo/dict/inconsistency）
   - カテゴリー別解析ロジック

3. **色分けハイライト機能**
   - CSS定義（4色ハイライト）
     - 🟣 言い回しアドバイス（紫色）
     - 🔴 誤字修正（赤色）
     - 🟡 社内辞書ルール（黄色）
     - 🟠 矛盾チェック（オレンジ色）
   - HTML生成ロジックの拡張
   - フロントエンド表示の改良

### Phase 2: 高度化機能
1. **社内辞書管理システム**
   - CompanyDictionaryモデル
   - 管理画面での辞書編集
   - カテゴリー別辞書適用

2. **矛盾検出システム**
   - InconsistencyDataモデル（地理的、時系列、数値、論理的、事実矛盾）
   - 矛盾検出ルールエンジン
   - 外部データベース連携（必要に応じて）

3. **フィルター・統計機能**
   - カテゴリー別表示切り替え
   - 信頼度フィルター
   - 校正統計レポート

## 技術的メモ

### 使用技術
- Claude 3.5 Sonnet v2 (anthropic.claude-3-5-sonnet-20241022-v2:0)
- Django ORM (新モデル追加)
- JavaScript (フィルター機能)
- CSS (4色ハイライトシステム)

### 新規モデル
```python
class CorrectionV2(models.Model):
    category = models.CharField(max_length=15)  # tone/typo/dict/inconsistency
    confidence = models.FloatField()
    severity = models.CharField(max_length=10)
    # 既存フィールド継承

class CompanyDictionary(models.Model):
    term = models.CharField(max_length=255)
    correct_form = models.CharField(max_length=255)
    category = models.CharField(max_length=50)
    is_active = models.BooleanField(default=True)

class InconsistencyData(models.Model):
    name = models.CharField(max_length=255)
    type = models.CharField(max_length=20)  # geographic/temporal/numerical/logical/factual
    correct_form = models.CharField(max_length=255)
    incorrect_patterns = models.TextField()
```

### API拡張
- `/proofreading_ai/proofread-v2/` エンドポイント
- カテゴリー別フィルター機能
- 統計データ取得API

## テスト項目
- [ ] Claude 3.5 Sonnet v2での校正精度テスト
- [ ] 4色ハイライト表示テスト（紫、赤、黄、オレンジ）
- [ ] カテゴリー分類精度テスト
- [ ] 社内辞書適用テスト
- [ ] 矛盾検出テスト（地理的、時系列、数値、論理的、事実）
- [ ] フィルター機能テスト
- [ ] パフォーマンステスト
- [ ] UI/UXテスト

## 期限
2024/12/31

## 優先度
High - 次世代校正機能の核となる重要な機能追加 

# [新機能] チャットワークにエラー報告機能を追加

## 目的
- 校正処理でエラーが発生した際に、自動的にチャットワークに報告する機能を実装
- エラーの迅速な察知と対応を可能にし、サービス品質の向上を図る

## 実装内容
1. チャットワーク通知機能の設計・実装
   - 環境変数でチャットワークAPIトークンとルームIDを設定
   - エラー通知用のサービスクラス作成
   - 通知レベル（ERROR, WARNING, INFO）の設定

2. 校正処理でのエラーハンドリング強化
   - `app/proofreading_ai/services/bedrock_client.py`にエラー通知機能を統合
   - Bedrock API呼び出し失敗時の通知
   - HTML解析エラー時の通知
   - その他予期しないエラーの通知

3. 通知メッセージの設計
   - エラー種別、発生時刻、エラーメッセージ、ユーザー情報を含める
   - 開発者が迅速に対応できる形式での情報整理

4. 設定・環境変数の追加
   - `.env`ファイルにチャットワーク設定項目を追加
   - CloudFormationのECSタスク定義に環境変数を追加
   - 本番・ステージング環境での設定方法をドキュメント化

## 技術的メモ
- チャットワークAPI v2を使用
- requests ライブラリでHTTP通信
- エラー通知の重複を防ぐためのレート制限機能も検討
- ログ出力とチャットワーク通知の両方を実装

## テスト項目
- [ ] チャットワークAPI接続テスト
- [ ] 各種エラー発生時の通知テスト
- [ ] 通知メッセージの内容確認
- [ ] 本番環境での動作確認
- [ ] エラー通知のレート制限テスト

## 期限
2025/06/05 

# [インフラ] ECSドメイン差し替え作業

## 目的
- 現在のECSアプリケーションのドメインを新しいドメインに変更
- HTTPS対応とCloudFrontによるCDN配信の最適化
- 本番環境でのドメイン切り替えをダウンタイム最小で実施

## 実装内容
1. 新ドメインの準備
   - 新ドメインのDNS設定確認
   - SSL証明書の取得・設定（AWS Certificate Manager）
   - Route 53でのホストゾーン設定

2. CloudFormationテンプレートの更新
   - `cloudformation/ecs-cluster.yml`のドメイン設定変更
   - ALB（Application Load Balancer）のリスナールール更新
   - CloudFrontディストリビューションの設定変更
   - セキュリティグループの設定確認

3. ECSサービスの更新
   - タスク定義での環境変数（ALLOWED_HOSTS）の更新
   - Django設定ファイルでのドメイン設定変更
   - CORS設定の更新

4. 切り替え手順の策定
   - Blue-Greenデプロイメント手順の準備
   - ヘルスチェック設定の確認
   - ロールバック手順の策定
   - 監視・アラート設定の確認

5. 検証・テスト
   - ステージング環境での事前テスト
   - SSL証明書の動作確認
   - 新ドメインでの機能テスト
   - パフォーマンステスト

## 技術的メモ
- 現在のドメイン: [既存ドメイン]
- 新しいドメイン: [新ドメイン]
- AWS Certificate Managerでワイルドカード証明書の利用検討
- CloudFrontでのキャッシュ設定最適化
- WAF（Web Application Firewall）の設定も併せて確認

## テスト項目
- [ ] 新ドメインでのHTTPS接続確認
- [ ] 全機能の動作確認（校正、辞書表示など）
- [ ] パフォーマンス測定
- [ ] SEO関連の設定確認
- [ ] 本番環境での切り替えテスト
- [ ] 旧ドメインからのリダイレクト確認

## 期限
2025/06/10 

# [機能追加] 校正ツール改良：4つのチェック機能追加とGoogle Workspace認証実装

## 目的
- 校正ツールの精度向上のため、4つの新しいチェック機能を追加
- Grapee社のGoogle Workspaceアカウントによる認証機能を実装
- ユーザビリティの向上とセキュリティ強化

## 実装内容

### 1. 四つのチェックポイント追加
1. **連続した語尾チェック機能**
   - 同じ語尾パターンの連続検出（〜でした。〜でした。など）
   - 設定可能な検出範囲（2文連続、3文連続など）
   - 語尾パターンの辞書管理機能の実装
   - チェック結果のハイライト表示

2. **番組と放送局のミスチェック機能**
   - 番組名と放送局の組み合わせ辞書の作成
   - 間違った組み合わせの検出とアラート機能
   - 番組情報データベースの管理機能
   - 管理画面での辞書編集機能

3. **人名のミスチェック機能**
   - 人名辞書との照合機能
   - よくある誤字パターンの検出
   - 敬称の適切性チェック
   - 人名データベースの管理機能

4. **タグのミスチェック機能**
   - HTMLタグの開始・終了の整合性チェック
   - 未対応タグの検出
   - タグの入れ子構造の検証
   - タグエラーの詳細表示

### 2. Google Workspace認証追加
1. **Google OAuth2.0認証の実装**
   - django-allauth を使用した実装
   - Grapee社ドメイン（@grapee.co.jp）限定認証
   - 既存のユーザーモデルとの統合
   - 管理画面での認証設定管理

2. **認証フロー構築**
   - Googleログインボタンの追加
   - ドメイン制限の実装
   - 初回ログイン時のユーザー情報自動登録
   - ログアウト処理の実装

3. **セキュリティ設定**
   - CSRF保護の実装
   - セッション管理の強化
   - 管理者権限の適切な設定
   - 認証エラーハンドリング

## 技術的メモ
- **使用技術**: Django 4.2+, django-allauth, Google OAuth2.0 API
- **データベース**: PostgreSQL（新テーブル追加）
- **フロントエンド**: 既存のBootstrapベース
- **API**: Google Workspace Admin API
- **設定情報**: 
  - Google Cloud Console でのOAuth設定
  - 環境変数での認証情報管理
  - 辞書データの初期投入

## テスト項目
- [ ] 連続語尾チェック機能の動作確認
- [ ] 番組・放送局チェック機能の動作確認
- [ ] 人名チェック機能の動作確認
- [ ] HTMLタグチェック機能の動作確認
- [ ] Google Workspace認証フローの確認
- [ ] ドメイン制限の動作確認
- [ ] 既存ユーザーとの統合テスト
- [ ] セキュリティテスト（CSRF、セッション）
- [ ] 管理画面での辞書管理機能テスト
- [ ] エラーハンドリングの確認

## 期限
2025/01/15 

# [機能改善] インスタグラムエンベッドコードを校正対象から除外

## 目的
- 記事内のInstagramエンベッドコードが校正対象となり、不要な修正提案が発生している問題を解決
- エンベッドコード内のテキストは編集不可のため、校正する意味がない
- 校正結果の精度向上とユーザビリティの改善

## 実装内容
1. **HTMLタグ保護機能の拡張**
   - `protect_html_tags_advanced()`関数にInstagram除外ロジックを追加
   - `<blockquote class="instagram-media">...</blockquote>`全体を保護対象に
   - `<script async src="//www.instagram.com/embed.js"></script>`も除外

2. **除外パターンの追加**
   ```python
   INSTAGRAM_PATTERNS = [
       r'<blockquote[^>]*class="instagram-media"[^>]*>.*?</blockquote>',
       r'<script[^>]*src="[^"]*instagram\.com/embed\.js"[^>]*></script>',
       r'<iframe[^>]*src="[^"]*instagram\.com[^"]*"[^>]*></iframe>'
   ]
   ```

3. **設定オプション追加**
   - 管理画面で除外機能のON/OFF切り替え可能
   - デフォルトは除外ON

## 技術的メモ
- `app/proofreading_ai/utils.py`の修正が必要
- 正規表現パターンのテストケース作成
- 既存のHTMLタグ保護機能との整合性確認

## テスト項目
- [ ] Instagramエンベッドコードが校正対象から除外される
- [ ] 通常のHTMLタグ保護機能に影響しない
- [ ] 除外設定のON/OFF切り替えが正常動作
- [ ] 複数のInstagramエンベッドが含まれる記事での動作確認

## 期限
2025/06/20 

# [仕様変更] 全角数字を半角に変換しない設定の追加

## 目的
- 現在の校正AIは全角数字（１２３）を半角数字（123）に変換提案している
- メディア記事では意図的に全角数字を使用する場合がある
- 特に見出しやタイトルで全角数字が好まれる傾向への対応

## 実装内容
1. **校正ルール設定の追加**
   ```python
   PROOFREADING_RULES = {
       'convert_fullwidth_numbers': False,  # 全角数字変換を無効化
       'preserve_intentional_fullwidth': True,  # 意図的な全角を保持
   }
   ```

2. **プロンプト修正**
   - Claude 4への指示に「全角数字はそのまま保持する」を明記
   - 例外ケース（明らかな誤入力）のみ提案するよう調整

3. **UI設定追加**
   - 校正画面に「全角数字を保持」チェックボックス追加
   - デフォルトはON（保持する）

4. **辞書ルール更新**
   - 社内辞書から全角→半角数字変換ルールを除外
   - 文脈に応じた判断ロジックの実装

## 技術的メモ
- `app/proofreading_ai/services/bedrock_client.py`のプロンプト修正
- `app/templates/proofreading_ai/index.html`にUI要素追加
- 設定値の保存・復元機能の実装

## テスト項目
- [ ] 全角数字が半角に変換されない
- [ ] 設定のON/OFF切り替えが正常動作
- [ ] 明らかな誤入力の場合は提案される
- [ ] 設定値がブラウザに保存される

## 期限
2025/06/25

# [UI改善] Top-p設定の分かりやすさ向上とプリセット機能追加

## 目的
- 現在の「Top-p」表記が技術的すぎて一般ユーザーには理解困難
- 0.1〜1.0の数値だけでは効果が分からない
- テスターから「どう設定すれば良いか分からない」との声への対応

## 実装内容
1. **表示名の変更**
   ```
   変更前: Top-p (0.7)
   変更後: 校正の厳密さ - バランス型 (0.7)
   ```

2. **プリセット機能の追加**
   ```javascript
   const PRESETS = {
       strict: { value: 0.3, name: '厳密モード', description: 'より多くの修正を提案' },
       balanced: { value: 0.7, name: 'バランス型', description: '適度な修正提案（推奨）' },
       creative: { value: 0.9, name: '寛容モード', description: '必要最小限の修正のみ' }
   };
   ```

3. **視覚的改善**
   - スライダーに色分け表示（青→緑→オレンジ）
   - リアルタイムプレビュー機能
   - 設定変更時の効果説明ポップアップ

4. **ヘルプ機能強化**
   - 「？」アイコンクリックで詳細説明表示
   - 使用例とサンプル結果の表示

## 技術的メモ
- `app/templates/proofreading_ai/index.html`のUI大幅修正
- JavaScript関数の追加（プリセット切り替え、ヘルプ表示）
- CSS追加（色分け、アニメーション効果）

## テスト項目
- [ ] プリセットボタンで値が正しく設定される
- [ ] スライダーの色分けが正常表示される
- [ ] ヘルプポップアップが正常動作する
- [ ] 設定値の保存・復元が正常動作する
- [ ] モバイル環境での表示確認

## 期限
2025/06/30

# [新機能] テスター向けエラー報告・フィードバック機能の実装

## 目的
- 現在エラー発生時の報告手段が不明確
- テスターからのフィードバック収集が困難
- 問題の再現や調査に時間がかかる状況の改善

## 実装内容
1. **エラー報告ボタンの追加**
   ```html
   <button id="reportErrorBtn" class="btn btn-warning">
       🐛 問題を報告
   </button>
   ```

2. **報告フォーム機能**
   - エラー内容の自動収集（ログ、設定、入力テキスト長など）
   - ユーザーコメント入力欄
   - スクリーンショット添付機能（オプション）

3. **ChatWork自動通知**
   ```python
   def send_user_feedback(error_type, user_comment, technical_data):
       message = f"""
       🐛 ユーザーエラー報告
       
       【報告者】{user.username}
       【エラー種別】{error_type}
       【ユーザーコメント】{user_comment}
       【技術情報】{technical_data}
       【発生時刻】{datetime.now()}
       """
       chatwork_service.send_notification(message)
   ```

4. **フィードバック管理画面**
   - 管理者向けエラー一覧表示
   - 対応状況管理（未対応/調査中/完了）
   - 統計情報表示

## 技術的メモ
- `app/proofreading_ai/views.py`に新しいエンドポイント追加
- `app/templates/proofreading_ai/index.html`にUI要素追加
- ChatWork通知機能の拡張
- 管理画面の新規作成

## テスト項目
- [ ] エラー報告ボタンが正常表示される
- [ ] 報告フォームが正常動作する
- [ ] ChatWork通知が正常送信される
- [ ] 管理画面でエラー一覧が表示される
- [ ] 対応状況の更新が正常動作する

## 期限
2025/07/05

# [UI簡素化] 高速モードボタンの廃止と自動最適化

## 目的
- 「高速モード」と「通常モード」の違いがユーザーに分かりにくい
- 選択肢が多すぎてユーザーが迷う状況の改善
- 実際の使用データでは高速モードの利用率が低い

## 実装内容
1. **UI要素の削除**
   ```javascript
   // 削除対象
   document.getElementById('fastModeToggle').remove();
   document.getElementById('fastModeLabel').remove();
   ```

2. **自動最適化ロジック**
   ```python
   def auto_select_processing_mode(text_length):
       if text_length > 20000:  # 2万文字以上
           return 'simple_prompt'  # 高速処理
       elif text_length > 10000:  # 1万文字以上
           return 'balanced_prompt'  # バランス処理
       else:
           return 'full_prompt'  # 完全処理
   ```

3. **処理モード表示**
   - ユーザーには処理モードを意識させない
   - ローディング画面で「最適な処理方法を選択中...」表示
   - 完了後に使用した処理方法を軽く表示

4. **設定統合**
   - Temperature、Top-pのみに設定を集約
   - シンプルで分かりやすいUI

## 技術的メモ
- `app/templates/proofreading_ai/index.html`からUI要素削除
- `app/proofreading_ai/views.py`に自動選択ロジック追加
- JavaScript関数の簡素化

## テスト項目
- [ ] 高速モードボタンが表示されない
- [ ] 文字数に応じて自動で処理モードが選択される
- [ ] ローディング画面で適切なメッセージが表示される
- [ ] 処理完了後に使用モードが表示される
- [ ] 既存の設定（Temperature、Top-p）が正常動作する

## 期限
2025/06/18