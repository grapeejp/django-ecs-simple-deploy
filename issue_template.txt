# [fix] タグ機能のビューが正しいレスポンスを返さない問題の修正

## 目的
- タグ一覧ページ（/tags/）にアクセスした際に500エラーが発生する問題を修正する
- ビューが適切なHttpResponseオブジェクトを返すように実装を修正する

## 実装内容
1. タグ機能のビュー実装の修正
   - urls.pyのラムダ関数をビュークラスまたは関数に変更
   - 適切なテンプレートのレンダリング処理を実装
   - HttpResponseオブジェクトを返すように修正

2. テンプレートの実装確認
   - タグ一覧表示用のテンプレートの存在確認
   - 必要に応じてテンプレートの作成または修正

3. テスト項目の追加
   - タグ一覧ページへのアクセステスト
   - レスポンスの型チェックテスト
   - ステータスコードの確認テスト

## 技術的メモ
- エラー内容：ValueError: The view tags.urls.<lambda> didn't return an HttpResponse object
- 対象ファイル：app/tags/urls.py
- Django 5.2での推奨実装パターンに従う
- ビューの実装はクラスベースビューを検討

## テスト項目
- [ ] タグ一覧ページにアクセスして200レスポンスが返ることを確認
- [ ] タグ一覧が正しく表示されることを確認
- [ ] 単体テストが追加され、パスすることを確認

## 期限
2024/05/08

# [deploy] ダッシュボードUIの本番環境への反映

## 目的
- 開発環境で実装したダッシュボードUIを本番環境に反映する
- デプロイ後の動作確認と監視体制の確立

## 実装内容
1. デプロイ前の準備
   - 静的ファイルの最適化（圧縮、バンドル）
   - 環境変数の確認と設定
   - データベースマイグレーションの準備

2. デプロイ作業
   - CloudFormationテンプレートの更新確認
   - ECSタスク定義の更新
   - デプロイコマンドの実行
   ```bash
   ./deploy.sh production
   ```

3. デプロイ後の確認
   - 静的ファイルがS3に正しくアップロードされているか確認
   - CloudFrontのキャッシュ更新
   - ヘルスチェックの状態確認
   - アプリケーションログの監視

## 技術的メモ
- デプロイ対象：ダッシュボードUI関連ファイル
- 影響範囲：フロントエンド全般
- 必要なAWSリソース：
  - ECS (Fargate)
  - S3 (静的ファイル)
  - CloudFront
  - RDS (PostgreSQL)

## テスト項目
- [ ] 本番環境でダッシュボードが正しく表示されることを確認
- [ ] 静的ファイル（CSS/JS）が正しく読み込まれることを確認
- [ ] レスポンシブデザインの動作確認
- [ ] ブラウザ互換性の確認（Chrome, Safari, Firefox）
- [ ] パフォーマンスメトリクスの確認

## 期限
2024/05/10

# [feature] AWS Bedrock + Claude 3.7 Sonnetを活用したグレイプらしさチェッカー機能

## 目的
- Claude 3.7 Sonnetを活用して各カテゴリ別テキストの「グレイプらしさ」を数値評価する機能を開発
- 編集者がコンテンツ作成時に品質とブランド一貫性を確保するためのツールを提供
- AIによる高精度な文体・構成分析で編集効率を向上

## 対象カテゴリ
### メインカテゴリ
1. トレンド
   - おもしろ
   - 動物
   - 写真・アート
   - ストーリー
2. ライフスタイル
   - 育児・子育て
   - フード
   - ライフハック
   - 話題の商品
   - ヘルスケア
   - ファッション
3. ビューティ
   - メイク・コスメ
4. エンタメ
   - 芸能
   - テレビ・ラジオ
   - 映画・ドラマ
   - ブック
   - 音楽
   - 動画配信サービス
5. サブカル
   - 漫画
   - アニメ
   - ゲーム
6. 社会
   - ニュース
   - スポーツ
   - 科学・天体
7. 特集・連載
8. SDGs

## 実装内容
1. AWS Bedrock連携基盤構築
   - AWS Bedrock APIクライアントの実装
   - Claude 3.7 Sonnetモデルへのリクエスト処理
   - レスポンスのパース・処理機能

2. カテゴリ別評価プロンプト設計
   - 各カテゴリの特徴を反映した評価基準の明確化
   - メインカテゴリとサブカテゴリに対応した評価プロンプト作成
   - カテゴリごとの特性（語彙、文体、構成など）を考慮した採点項目設計

3. グレイプらしさ評価機能
   - 文体チェック（親しみやすさ、語尾表現、文長など）
   - 構成チェック（見出し、段落、質問形式など）
   - キーワード適合度（カテゴリ特有の語彙使用）
   - 0〜100点のスコアリングシステム

4. ユーザーインターフェース開発
   - テキスト入力フォーム
   - カテゴリ・サブカテゴリ選択UI
   - 結果表示画面（総合点、項目別評価、改善提案）
   - 処理状況の表示（非同期処理）

5. 改善提案機能
   - カテゴリ特性に基づく具体的な改善ポイント提示
   - 代替表現のサジェスト
   - 参考記事の提案

## 技術的メモ
- AWS SDKを使用したBedrock API連携（boto3）
- 非同期処理によるUI応答性の確保（Celery/Django Channels）
- AWS IAM権限設定（Bedrockアクセス用）
- コスト管理のためのモニタリング設定
- 各カテゴリの特徴データベース構築

## テスト項目
- [ ] 全カテゴリ・サブカテゴリが選択可能であることを確認
- [ ] AWS Bedrock API連携が正常に機能することを確認
- [ ] カテゴリごとの評価結果に妥当な差異が出ることを確認
- [ ] 実際のグレイプ記事でハイスコアが出ることを確認
- [ ] 改善提案が具体的かつ実用的であることを検証
- [ ] API利用量とコストの監視機能が正常に動作すること

## 期限
2024/06/15 