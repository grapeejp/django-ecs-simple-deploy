# [fix] タグ機能のビューが正しいレスポンスを返さない問題の修正

## 目的
- タグ一覧ページ（/tags/）にアクセスした際に500エラーが発生する問題を修正する
- ビューが適切なHttpResponseオブジェクトを返すように実装を修正する

## 実装内容
1. タグ機能のビュー実装の修正
   - urls.pyのラムダ関数をビュークラスまたは関数に変更
   - 適切なテンプレートのレンダリング処理を実装
   - HttpResponseオブジェクトを返すように修正

2. テンプレートの実装確認
   - タグ一覧表示用のテンプレートの存在確認
   - 必要に応じてテンプレートの作成または修正

3. テスト項目の追加
   - タグ一覧ページへのアクセステスト
   - レスポンスの型チェックテスト
   - ステータスコードの確認テスト

## 技術的メモ
- エラー内容：ValueError: The view tags.urls.<lambda> didn't return an HttpResponse object
- 対象ファイル：app/tags/urls.py
- Django 5.2での推奨実装パターンに従う
- ビューの実装はクラスベースビューを検討

## テスト項目
- [ ] タグ一覧ページにアクセスして200レスポンスが返ることを確認
- [ ] タグ一覧が正しく表示されることを確認
- [ ] 単体テストが追加され、パスすることを確認

## 期限
2024/05/08

# [deploy] ダッシュボードUIの本番環境への反映

## 目的
- 開発環境で実装したダッシュボードUIを本番環境に反映する
- デプロイ後の動作確認と監視体制の確立

## 実装内容
1. デプロイ前の準備
   - 静的ファイルの最適化（圧縮、バンドル）
   - 環境変数の確認と設定
   - データベースマイグレーションの準備

2. デプロイ作業
   - CloudFormationテンプレートの更新確認
   - ECSタスク定義の更新
   - デプロイコマンドの実行
   ```bash
   ./deploy.sh production
   ```

3. デプロイ後の確認
   - 静的ファイルがS3に正しくアップロードされているか確認
   - CloudFrontのキャッシュ更新
   - ヘルスチェックの状態確認
   - アプリケーションログの監視

## 技術的メモ
- デプロイ対象：ダッシュボードUI関連ファイル
- 影響範囲：フロントエンド全般
- 必要なAWSリソース：
  - ECS (Fargate)
  - S3 (静的ファイル)
  - CloudFront
  - RDS (PostgreSQL)

## テスト項目
- [ ] 本番環境でダッシュボードが正しく表示されることを確認
- [ ] 静的ファイル（CSS/JS）が正しく読み込まれることを確認
- [ ] レスポンシブデザインの動作確認
- [ ] ブラウザ互換性の確認（Chrome, Safari, Firefox）
- [ ] パフォーマンスメトリクスの確認

## 期限
2024/05/10

# [feature] AWS Bedrock校正AIシステムのDjango+ECS移行

## 目的
- 現行EC2ベースの「AWS Bedrock Grape Context」校正システムをDjango + AWS ECSアーキテクチャへ移行
- 運用効率化と保守性の向上
- 小規模だが安定したサービス提供の実現

## 実装内容
1. 基本機能移行
   - Django環境構築
   - テキスト校正機能（AWS Bedrock連携）
   - HTMLタグ保持校正処理
   - 置換辞書による語句統一
   - 校正前後の差分表示
   - タグ推薦機能
   - 最小限のWordPress連携（リダイレクト）
   
2. 追加・改善機能
   - 校正履歴の基本的な保存と表示
   - 置換辞書の表示と管理者メンテナンス機能

3. インフラ整備
   - 小規模ECS環境構築（Fargate）
   - ECR設定
   - 小規模ALB構成
   - 小規模RDS(PostgreSQL)設定
   - CloudFormationテンプレート作成

## 技術的メモ
- Python 3.11+, Django 5.2
- AWS Bedrock API (Claude 3 Sonnet)
- フロントエンド: Django Templates + Bootstrap 5
- AWS ECS (Fargate) - 小規模
- 同時5ユーザー程度の処理を想定
- クロスプラットフォーム対応（M3 Mac → AWS x86_64）

## データベース設計
- ProofreadingRequest: 校正リクエスト
- ProofreadingResult: 校正結果
- Category: カテゴリ情報
- Tag: タグ情報
- ReplacementDictionary: 置換辞書

## テスト項目
- [ ] テキスト校正機能が正常に動作すること
- [ ] HTMLタグが保持されること
- [ ] 置換辞書による置換が適切に行われること
- [ ] WordPressからのリダイレクトが機能すること
- [ ] 校正履歴が保存・表示されること
- [ ] 同時5ユーザーの処理が可能なこと
- [ ] ECS環境でのデプロイが正常に完了すること

## 期限
2024/06/30

# [機能追加] 校正AI v2 - 4色カテゴリー分類システム

## 目的
Claude 3.5 Sonnet v2を活用した次世代校正AI機能の実装。4つのカテゴリーに分けた色分けハイライトで、より詳細で実用的な修正提案を提供する。

## 実装内容

### Phase 1: 基盤構築
1. **Claude 3.5 Sonnet v2対応**
   - BedrockClientの新モデル対応
   - プロンプト設計の最適化
   - レスポンス解析の改良

2. **カテゴリー分類システム**
   - CorrectionV2モデルの作成
   - 4つのカテゴリー定義（tone/typo/dict/geo）
   - カテゴリー別解析ロジック

3. **色分けハイライト機能**
   - CSS定義（4色ハイライト）
   - HTML生成ロジックの拡張
   - フロントエンド表示の改良

### Phase 2: 高度化機能
1. **社内辞書管理システム**
   - CompanyDictionaryモデル
   - 管理画面での辞書編集
   - カテゴリー別辞書適用

2. **地域データベース連携**
   - 地名・地域情報データベース
   - 地理的矛盾検出ロジック
   - 外部API連携（必要に応じて）

3. **フィルター・統計機能**
   - カテゴリー別表示切り替え
   - 信頼度フィルター
   - 校正統計レポート

## 技術的メモ

### 使用技術
- Claude 3.5 Sonnet v2 (anthropic.claude-3-5-sonnet-20241022-v2:0)
- Django ORM (新モデル追加)
- JavaScript (フィルター機能)
- CSS (4色ハイライトシステム)

### 新規モデル
```python
class CorrectionV2(models.Model):
    category = models.CharField(max_length=10)  # tone/typo/dict/geo
    confidence = models.FloatField()
    severity = models.CharField(max_length=10)
    # 既存フィールド継承

class CompanyDictionary(models.Model):
    term = models.CharField(max_length=255)
    correct_form = models.CharField(max_length=255)
    category = models.CharField(max_length=50)
    is_active = models.BooleanField(default=True)
```

### API拡張
- `/proofreading_ai/proofread-v2/` エンドポイント
- カテゴリー別フィルター機能
- 統計データ取得API

## テスト項目
- [ ] Claude 3.5 Sonnet v2での校正精度テスト
- [ ] 4色ハイライト表示テスト
- [ ] カテゴリー分類精度テスト
- [ ] 社内辞書適用テスト
- [ ] 地域矛盾検出テスト
- [ ] フィルター機能テスト
- [ ] パフォーマンステスト
- [ ] UI/UXテスト

## 期限
2024/12/31

## 優先度
High - 次世代校正機能の核となる重要な機能追加 